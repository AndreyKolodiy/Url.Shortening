using Application.ShortUrls.Commands.CreateShortUrl;using Application.ShortUrls.Commands.DeleteShortUrl;using Application.ShortUrls.Commands.UpdateShortUrl;using Application.ShortUrls.Queries.GetShortUrl;using Application.ShortUrls.Queries.GetShortUrlList;using AutoMapper;using Microsoft.AspNetCore.Mvc;using WebApi.Models;namespace WebApi.Controllers;[Route("api/[controller]")]public class ShortUrlController : BaseController{    private readonly IMapper _mapper;    public ShortUrlController(IMapper mapper)        => _mapper = mapper;    /// <summary>    /// Gets the list of short url    /// </summary>    /// <remarks>    /// Sample request    /// GET /shortUrl    /// </remarks>    /// <returns>Return ShortUrlListDto</returns>    /// <response code="200">Success</response>    [HttpGet]    [ProducesResponseType(StatusCodes.Status200OK)]    public async Task<ActionResult<ShortUrlListDto>> GetAll()    {        var query = new GetShortUrlListQuery();        var vm = await Mediator.Send(query);        return Ok(vm);    }    /// <summary>    /// Gets the shortUrl by path    /// </summary>    /// <remarks>    /// Sample request    /// GET /shortUrl/google(path)    /// </remarks>    /// <param name="path">ShortUrl path string</param>    /// <returns>Return ShortUrlDto</returns>    /// <response code="200">Success</response>    [HttpGet("{path:alpha}")]    [ProducesResponseType(StatusCodes.Status200OK)]    public async Task<ActionResult<ShortUrlDto>> Get(string path)    {        var query = new GetShortUrlQuery()        {            Path = path        };        var vm = await Mediator.Send(query);        return Redirect(vm.Destination);    }    /// <summary>    /// Create the short url    /// </summary>    /// <remarks>    /// Sample request    /// POST /shortUrl    /// {    ///     destination: "http://google.com",    ///     path: "google"    /// }    /// </remarks>    /// <param name="createShortUrlDto">CreateShortUrlDto object</param>    /// <returns>Returns NoContent</returns>    /// <response code="204">Success</response>    [HttpPost]    [ProducesResponseType(StatusCodes.Status204NoContent)]    public async Task<ActionResult<CreateShortUrlCommand>> Create([FromBody] CreateShortUrlDto createShortUrlDto)    {        var command = _mapper.Map<CreateShortUrlCommand>(createShortUrlDto);        await Mediator.Send(command);        return NoContent();    }    /// <summary>    /// Update the short url    /// </summary>    /// <remarks>    /// Sample request    /// PUT /shortUrl    /// {    ///     destination: "http://google.com",    ///     path: "google"    /// }    /// </remarks>    /// <param name="updateShortUrlDto">UpdateShortUrlDto object</param>    /// <returns>Returns NoContent</returns>    /// <response code="204">Success</response>    [HttpPut]    [ProducesResponseType(StatusCodes.Status204NoContent)]    public async Task<ActionResult<UpdateShortUrlCommand>> Update([FromBody] UpdateShortUrlDto updateShortUrlDto)    {        var command = _mapper.Map<UpdateShortUrlCommand>(updateShortUrlDto);        await Mediator.Send(command);        return NoContent();    }    /// <summary>    /// Delete the short by path    /// </summary>    /// <remarks>    /// Sample request    /// DELETE /shortUrl/google(path)    /// </remarks>    /// <param name="path">path of the short url (string)</param>    /// <returns>Return NoContent</returns>    /// <response code="204">Success</response>    [HttpDelete("{path:alpha}")]    [ProducesResponseType(StatusCodes.Status204NoContent)]    public async Task<ActionResult<DeleteShortUrlCommand>> Delete(string path)    {        var commond = new DeleteShortUrlCommand        {            Path = path        };        await Mediator.Send(commond);        return NoContent();    }}