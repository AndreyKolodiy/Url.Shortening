using System.Reflection;using Application;using Application.Common.Mappings;using Application.Interfaces;using Infrastructure;using Serilog;using Serilog.Events;using WebApi.Middleware;Log.Logger = new LoggerConfiguration()    .MinimumLevel.Override("Microsoft", LogEventLevel.Information)    .WriteTo.File("ShortUrlWebAppLog-.txt", rollingInterval:        RollingInterval.Day)    .CreateLogger();var builder = WebApplication.CreateBuilder(args);builder.Host.UseSerilog();builder.Services.AddAutoMapper(config =>{    config.AddProfile(new AssemblyMappingProfile(Assembly.GetExecutingAssembly()));    config.AddProfile(new AssemblyMappingProfile(typeof(IShortUrlDbContext).Assembly));});builder.Services.AddApplication();builder.Services.AddPersistence(builder.Configuration);builder.Services.AddControllers();builder.Services.AddCors(options =>{    options.AddPolicy("AllowAll", policy =>    {        policy.AllowAnyHeader();        policy.AllowAnyMethod();        policy.AllowAnyOrigin();    });});var app = builder.Build();app.UseCustomExceptionHandler();app.UseRouting();app.UseCors("AllowAll");app.MapControllers();using (var scope = app.Services.CreateScope()){    var serviceProvider = scope.ServiceProvider;    try    {        var context = serviceProvider.GetRequiredService<ShortUrlDbContext>();        DbInitializer.Initialize(context);    }    catch (Exception e)    {        Log.Fatal(e, "An error occurred while app initialization");    }}app.Run();