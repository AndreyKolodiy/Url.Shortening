using Application.Common.Exceptions;using Application.Interfaces;using AutoMapper;using Domain;using MediatR;using Microsoft.EntityFrameworkCore;namespace Application.ShortUrls.Queries.GetShortUrl;public class GetShortUrlQueryHandler : IRequestHandler<GetShortUrlQuery, ShortUrlDto>{    private readonly IShortUrlDbContext _dbContext;    private readonly IMapper _mapper;    public GetShortUrlQueryHandler(IShortUrlDbContext dbContext, IMapper mapper)        => (_dbContext, _mapper) = (dbContext, mapper);    public async Task<ShortUrlDto> Handle(GetShortUrlQuery request, CancellationToken cancellationToken)    {        var entity = await _dbContext.ShortUrls.FirstOrDefaultAsync(shortUrl            => shortUrl.Path == request.Path, cancellationToken);        if (entity == null) { throw new NotFoundException(nameof(ShortUrl), request.Path); }        return _mapper.Map<ShortUrlDto>(entity);    }}